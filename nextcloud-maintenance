#!/bin/bash

## Parameters ##
if [ ! -f $(dirname $0)/nextcloud.conf ] ; then
	echo -e "ERROR: Parameter file $(dirname $0)/nextcloud.conf not found!"
else
	. $(dirname $0)/nextcloud.conf
fi

## Variables ##
date=$(date +"%Y%m%d")
testmode="no"
verbose="no"
methode=""
backuptype=""
maintmode=""
dbhost=$(grep dbhost $ncdir/config/config.php | awk -F "'" '{print $4}' | awk -F ":" '{print $1}')
dbport=$(grep dbhost $ncdir/config/config.php | awk -F "'" '{print $4}' | awk -F ":" '{print $2}')
dbuser=$(grep dbuser $ncdir/config/config.php | awk -F "'" '{print $4}')
dbpwd=$(grep dbpassword $ncdir/config/config.php | awk -F "'" '{print $4}')
dbname=$(grep dbname $ncdir/config/config.php | awk -F "'" '{print $4}')

## Functions ##
# Script usage #
usage()
{
	echo -e "Usage: $(basename $0) [-b all|database|folder] [-m on|off] [-t] [-u] [-v]"
	echo -e " -b: backup mode"
	echo -e " -m: maintenance mode"
	echo -e " -t: test mode (do not execute the operations)"
	echo -e " -u: update (execute updater.phar)"
	echo -e " -v: verbose mode (display output to stdout in addition to logs)"
}

# Logging #
log()
{
	if [ "$1" == "-f" ] ; then
		echo -e $2 | tee -a ${logdir}/${date}.log
	elif [ "$verbose" == "yes" ] ; then
		echo -e $1 | tee -a ${logdir}/${date}.log
	else
		echo -e $1 >> ${logdir}/${date}.log
	fi
}

# MySQL database export #
db_dump()
{
	log "[INFO] Exporting DataBase"
	if [ "$testmode" == "no"  ] ; then
		mysqldump --single-transaction -h "$dbhost" -P "$dbport" -u "$dbuser" -p"$dbpwd" "$dbname" > $bkpdst/nextcloud-sqlbkp_$date.sql 2>>${logdir}/${date}.log
		if [ $? -ne 0 ] ; then
			log "[ERROR] DataBase export failed (exit code: $?)"
			exit 1
		else
			ls -l $bkpdst/nextcloud-sqlbkp_$date.sql | awk -F " " '{print $5,$9}' >>${logdir}/${date}.log
			log "[OK] DataBase export succeeded"
		fi
	fi
}

# Folder archival #
folder_archive()
{
	log "[INFO] Archiving folder"
	if [ "$testmode" == "no" ] ; then
		tar -czf $bkpdst/nextcloud-dirbkp_$date.tgz --directory="$ncdir" --exclude="$direxcl" . 2>>${logdir}/${date}.log
		if [ $? -ne 0 ] ; then
			log "[ERROR] Folder archive failed (exit code: $?)"
			exit 1
		else
			ls -l $bkpdst/nextcloud-dirbkp_$date.tgz | awk -F " " '{print $5,$9}' >>${logdir}/${date}.log
			log "[OK] Folder archive succeeded"
		fi
	fi
}

# Setting maintenance mode on Nextcloud instance #
maint_mode()
{
	mode=$(printf '%s\n' "$1" | awk '{ print toupper($0) }')
	log "[INFO] Setting maintenance mode '$mode'"
	if [ "$testmode" == "no"  ] ; then
		sudo -u www-data php $ncdir/occ maintenance:mode --$1 1>/dev/null 2>>${logdir}/${date}.log
		if [ $? -ne 0 ] ; then
			log "[ERROR] Maintenance mode '$mode' failed (exit code: $?)"
			exit 1
		else
			log "[OK] Maintenance mode '$mode' succeeded"
		fi
	fi
}

# Updater #
update_phar()
{
	log "[INFO] Updating"
	if [ "$testmode" == "no" ] ; then
		sudo -u www-data php $ncdir/updater/updater.phar | tee -a ${logdir}/${date}.log
		if [ $? -ne 0 ] ; then
			log "[ERROR] Update failed (exit code: $?)"
			exit 1
		else
			log "[OK] Update succeeded"
		fi
	fi
}

## Main ##
touch ${logdir}/${date}.log
log "\n----- $(date +'%Y-%m-%d') $(date +'%H-%M-%S') -----"

# Options and arguments parsing #
while getopts ":b:m:tuv" option
do
	case $option in
		b)	methode="backup" ; backuptype="$OPTARG" ;;
		m)	methode="maintenance" ; maintmode="$OPTARG" ;;
		t)	testmode="yes" ;;
		u)	methode="update" ;;
		v)	verbose="yes" ;;
		*)	log -f "[ERROR] Invalid option: $OPTARG\n" ; usage ; exit 2 ;;
	esac
done

# Arguments verification #
if [ $# -eq 0 ] ; then
	usage | tee -a ${logdir}/${date}.log ; exit 0
elif [ -z "$methode" ] ; then
	log -f "[ERROR] Missing option\n" ; usage ; exit 2
elif [ "$methode" == "backup" ] && [ -z "$backuptype" ] ; then
	log -f "[ERROR] Missing argument\n" ; usage ; exit 2
elif [ "$methode" == "maintenance" ] && [ -z "$maintmode" ] ; then
	log -f "[ERROR] Missing argument\n" ; usage ; exit 2
elif [ "$methode" == "backup" ] && [ "$backuptype" != "all" ] && [ "$backuptype" != "database" ] && [ "$backuptype" != "folder" ] ; then
	log -f "[ERROR] Wrong backup type: $backuptype\n" ; usage ; exit 2
elif [ "$methode" == "maintenance" ] && [ "$maintmode" != "on" ] && [ "$maintmode" != "off" ] ; then
	log -f "[ERROR] Wrong maintenance mode: $maintmode\n" ; usage ; exit 2
fi

# Methode execution #
case "$methode" in
	backup)
		maint_mode on
		case "$backuptype" in
			all)		db_dump ; folder_archive ;;
			database)	db_dump ;;
			folder)		folder_archive ;;
		esac
		maint_mode off
		;;
	maintenance)
		maint_mode $maintmode
		;;
	update)
		update_phar
		;;
esac

exit 0
## End ##
